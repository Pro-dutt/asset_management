{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\n\n/**\n * Custom hook to manage multiple loading states by key\n * @returns {Object} Object containing loading state management functions and states\n */\n\nexport const useLoadingState = () => {\n  _s();\n  const [loadingStates, setLoadingStates] = useState({});\n\n  /**\n   * Sets the loading state for a specific key\n   * @param {string} key - The identifier for the loading state\n   * @param {boolean} isLoading - The loading state to set\n   */\n\n  const setLoading = useCallback((key, isLoading) => {\n    setLoadingStates(prevStates => ({\n      ...prevStates,\n      [key]: isLoading\n    }));\n  }, []);\n\n  /**\n   * Checks if a specific key is in loading state\n   * @param {string} key - The identifier to check\n   * @returns {boolean} The loading state for the key\n   */\n\n  const isLoading = useCallback(key => {\n    return loadingStates[key] || false;\n  }, [loadingStates]);\n\n  /**\n   * Resets all loading states to their initial state\n   */\n  const resetLoading = useCallback(() => {\n    setLoadingStates({});\n  }, []);\n  return {\n    isLoading,\n    setLoading,\n    resetLoading,\n    loadingStates\n  };\n};\n_s(useLoadingState, \"5d4eXoSmJSfLxYcDYGcFLhFK3xk=\");","map":{"version":3,"names":["useCallback","useState","useLoadingState","_s","loadingStates","setLoadingStates","setLoading","key","isLoading","prevStates","resetLoading"],"sources":["/home/user/Documents/Asset-Management/src/services/hooks/loading/index.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\n/**\n * Custom hook to manage multiple loading states by key\n * @returns {Object} Object containing loading state management functions and states\n */\n\nexport const useLoadingState = () => {\n    const [loadingStates, setLoadingStates] = useState({});\n\n    /**\n     * Sets the loading state for a specific key\n     * @param {string} key - The identifier for the loading state\n     * @param {boolean} isLoading - The loading state to set\n     */\n\n    const setLoading = useCallback((key, isLoading) => {\n        setLoadingStates((prevStates) => ({\n            ...prevStates,\n            [key]: isLoading,\n        }));\n    }, []);\n\n    /**\n     * Checks if a specific key is in loading state\n     * @param {string} key - The identifier to check\n     * @returns {boolean} The loading state for the key\n     */\n\n    const isLoading = useCallback(\n        (key) => {\n            return loadingStates[key] || false;\n        },\n        [loadingStates]\n    );\n\n    /**\n     * Resets all loading states to their initial state\n     */\n    const resetLoading = useCallback(() => {\n        setLoadingStates({});\n    }, []);\n\n    return {\n        isLoading,\n        setLoading,\n        resetLoading,\n        loadingStates,\n    };\n};\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;;AAE7C;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEtD;AACJ;AACA;AACA;AACA;;EAEI,MAAMK,UAAU,GAAGN,WAAW,CAAC,CAACO,GAAG,EAAEC,SAAS,KAAK;IAC/CH,gBAAgB,CAAEI,UAAU,KAAM;MAC9B,GAAGA,UAAU;MACb,CAACF,GAAG,GAAGC;IACX,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;;EAEN;AACJ;AACA;AACA;AACA;;EAEI,MAAMA,SAAS,GAAGR,WAAW,CACxBO,GAAG,IAAK;IACL,OAAOH,aAAa,CAACG,GAAG,CAAC,IAAI,KAAK;EACtC,CAAC,EACD,CAACH,aAAa,CAClB,CAAC;;EAED;AACJ;AACA;EACI,MAAMM,YAAY,GAAGV,WAAW,CAAC,MAAM;IACnCK,gBAAgB,CAAC,CAAC,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACHG,SAAS;IACTF,UAAU;IACVI,YAAY;IACZN;EACJ,CAAC;AACL,CAAC;AAACD,EAAA,CA1CWD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}