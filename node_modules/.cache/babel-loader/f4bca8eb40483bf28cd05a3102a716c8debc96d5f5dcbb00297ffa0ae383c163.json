{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$();\nimport { endPointsApiService } from \"@/services/api/sampleEndPoints\";\nimport { useLoading } from \"@/services/context/loading\";\nimport { useNotification } from \"@/services/context/notification\";\nimport apiConstants from \"@/services/utils/constants\";\nimport { useCallback, useState } from \"react\";\n\n/**\n * Custom hook to handle EndPoints signup functionality with loading and notification states\n * @returns {Object} Object containing EndPoints signup execution function and related states\n */\n\nexport const useEndPointsSignup = () => {\n  _s();\n  const {\n    showErrorNotification,\n    showSuccessNotification,\n    successMessages,\n    errorMessages\n  } = useNotification();\n  const {\n    isLoading,\n    setLoading\n  } = useLoading();\n  const SIGNUP_KEY = apiConstants.loadingStateKeys.SIGN_UP;\n\n  /**\n   * Handles the EndPoints signup process with loading states and error handling\n   * @param {Object} payload - The signup data\n   * @param {Object} params - Additional parameters for the signup request\n   * @param {function} onSuccess - Callback to execute on successful signup\n   * @param {function} onError - Callback to execute on signup failure\n   */\n\n  const executeEndPointsSignup = useCallback(async ({\n    payload,\n    onSuccess,\n    onError,\n    options\n  }, params) => {\n    setLoading(SIGNUP_KEY, true);\n    const controller = new AbortController();\n    try {\n      const data = await endPointsApiService.createSignup(payload, params, controller.signal);\n      if (options !== null && options !== void 0 && options.showNotification) {\n        showSuccessNotification({\n          key: SIGNUP_KEY,\n          value: data,\n          hideNotification: true\n        });\n      }\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();\n      return data;\n    } catch (error) {\n      showErrorNotification({\n        key: SIGNUP_KEY,\n        value: error || \"Failed to complete signup\"\n      });\n      onError === null || onError === void 0 ? void 0 : onError();\n      console.error(\"Signup error:\", error);\n      throw error;\n    } finally {\n      setLoading(SIGNUP_KEY, false);\n    }\n  }, [SIGNUP_KEY, showErrorNotification, showSuccessNotification, setLoading]);\n  return {\n    endPointsSignup: {\n      execute: executeEndPointsSignup,\n      isLoading: isLoading(SIGNUP_KEY) || false,\n      successMessages: successMessages === null || successMessages === void 0 ? void 0 : successMessages[SIGNUP_KEY],\n      errorMessages: errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages[SIGNUP_KEY]\n    }\n  };\n};\n_s(useEndPointsSignup, \"ZrxZ4qHmmbbFnfxdY+bIVWOpyXA=\", false, function () {\n  return [useNotification, useLoading];\n});\nexport const useEndPointsVerifyEmail = () => {\n  _s2();\n  const {\n    showErrorNotification,\n    showSuccessNotification,\n    successMessages,\n    errorMessages\n  } = useNotification();\n  const {\n    isLoading,\n    setLoading\n  } = useLoading();\n  const Verify_Email_KEY = apiConstants.loadingStateKeys.VERIFY_EMAIL;\n\n  /**\n   * Handles the EndPoints verify email process with loading states and error handling\n   * @param {Object} payload - The verify email data\n   * @param {Object} params - Additional parameters for the verify email request\n   * @param {function} onSuccess - Callback to execute on successful verify email\n   * @param {function} onError - Callback to execute on verify email failure\n   */\n\n  const executeEndPointsVerifyEmail = useCallback(async ({\n    payload,\n    onSuccess,\n    onError,\n    options\n  }, params) => {\n    setLoading(Verify_Email_KEY, true);\n    const controller = new AbortController();\n    try {\n      var _data$data;\n      const data = await endPointsApiService.verifyEmail(payload, params, controller.signal);\n      if (data !== null && data !== void 0 && (_data$data = data.data) !== null && _data$data !== void 0 && _data$data.token) {\n        localStorage.setItem(\"endPoints_token\", data.data.token);\n      }\n      showSuccessNotification({\n        key: Verify_Email_KEY,\n        value: data,\n        hideNotification: true\n      });\n      if (onSuccess) onSuccess();\n    } catch (error) {\n      showErrorNotification({\n        key: Verify_Email_KEY,\n        value: error || \"Failed to complete verify email\"\n      });\n      if (onError) onError();\n      console.error(\"verify email error:\", error);\n    } finally {\n      setLoading(Verify_Email_KEY, false);\n    }\n  }, [Verify_Email_KEY, showErrorNotification, showSuccessNotification, setLoading]);\n  return {\n    endPointsVerifyEmail: {\n      execute: executeEndPointsVerifyEmail,\n      isLoading: isLoading(Verify_Email_KEY) || false,\n      successMessages: successMessages === null || successMessages === void 0 ? void 0 : successMessages[Verify_Email_KEY],\n      errorMessages: errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages[Verify_Email_KEY]\n    }\n  };\n};\n_s2(useEndPointsVerifyEmail, \"BCPEPjvxpLCvtKLvoiPWnlR9kG8=\", false, function () {\n  return [useNotification, useLoading];\n});\nexport const useEndPointsOnboardedUser = () => {\n  _s3();\n  const [user, setUser] = useState({});\n  const {\n    showErrorNotification,\n    successMessages,\n    errorMessages\n  } = useNotification();\n  const {\n    isLoading,\n    setLoading\n  } = useLoading();\n  const LOADING_KEY = apiConstants.loadingStateKeys.CURRENT_ONBOARDED_USER;\n  const fetchUser = useCallback(async ({\n    onSuccess,\n    onError,\n    options\n  }, params) => {\n    setLoading(LOADING_KEY, true);\n    const controller = new AbortController();\n    try {\n      const {\n        data\n      } = await endPointsApiService.currentOnboardedUser(params, controller.signal);\n      setUser(data);\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(data);\n    } catch (error) {\n      showErrorNotification({\n        key: LOADING_KEY,\n        value: error || \"Failed to fetch onboarded user\",\n        hideNotification: true\n      });\n      onError === null || onError === void 0 ? void 0 : onError(error);\n      console.error(\"Failed to fetch onboarded user:\", error);\n    } finally {\n      setLoading(LOADING_KEY, false);\n    }\n  }, [LOADING_KEY, showErrorNotification, setLoading]);\n  return {\n    onboardedUser: {\n      data: user,\n      fetch: fetchUser,\n      isLoading: isLoading(LOADING_KEY) || false,\n      successMessages: successMessages === null || successMessages === void 0 ? void 0 : successMessages[LOADING_KEY],\n      errorMessages: errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages[LOADING_KEY]\n    }\n  };\n};\n_s3(useEndPointsOnboardedUser, \"VeP0UtbX8ZLsHxnXHM7jZp75wYY=\", false, function () {\n  return [useNotification, useLoading];\n});\nexport const useEndPointsSetupBasicInfo = () => {\n  _s4();\n  const {\n    showErrorNotification,\n    showSuccessNotification,\n    successMessages,\n    errorMessages\n  } = useNotification();\n  const {\n    isLoading,\n    setLoading\n  } = useLoading();\n  const SETUP_INSTITUTE_BASIC_INFO = apiConstants.loadingStateKeys.SETUP_BASE_INFO;\n\n  /**\n   * Handles the EndPoints basic details process with loading states and error handling\n   * @param {Object} payload - The endPoints basic info data\n   * @param {Object} queryParams - Additional parameters for the setup request\n   * @param {function} onSuccess - Callback to execute on successful setup\n   * @param {function} onError - Callback to execute on setup failure\n   */\n\n  const setupEndPointsBasicInfo = useCallback(async ({\n    payload,\n    onSuccess,\n    onError,\n    options\n  }, queryParams) => {\n    setLoading(SETUP_INSTITUTE_BASIC_INFO, true);\n    const controller = new AbortController();\n    try {\n      const data = await endPointsApiService.setupEndPointsBasicInfo(payload, queryParams, controller.signal);\n      showSuccessNotification({\n        key: SETUP_INSTITUTE_BASIC_INFO,\n        value: data,\n        hideNotification: (options === null || options === void 0 ? void 0 : options.hideNotification) || false\n      });\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();\n      return data;\n    } catch (error) {\n      console.log(error);\n      const errors = {\n        success: false,\n        message: \"An endPoints with the name 'kareem duke test.....' already exists. Please choose a different name.\",\n        statusCode: 409\n      };\n      const joiErrors = {\n        success: false,\n        message: \"Validation Failed\",\n        statusCode: 400,\n        errors: [{\n          message: \"Owner name must be at least 2 characters long.\",\n          path: [\"ownerName\"]\n        }, {\n          message: \"Owner phone number must be exactly 10 digits.\",\n          path: [\"ownerPhone\"]\n        }]\n      };\n      showErrorNotification({\n        key: SETUP_INSTITUTE_BASIC_INFO,\n        value: error || \"Failed to complete setup endPoints Basic Info \"\n      });\n      onError === null || onError === void 0 ? void 0 : onError();\n      console.error(\"Setup EndPoints Basic Info error:\", error);\n      throw error;\n    } finally {\n      setLoading(SETUP_INSTITUTE_BASIC_INFO, false);\n    }\n  }, [SETUP_INSTITUTE_BASIC_INFO, showErrorNotification, showSuccessNotification, setLoading]);\n  return {\n    endPointsSetupBasicInfo: {\n      execute: setupEndPointsBasicInfo,\n      isLoading: isLoading(SETUP_INSTITUTE_BASIC_INFO) || false,\n      successMessages: successMessages === null || successMessages === void 0 ? void 0 : successMessages[SETUP_INSTITUTE_BASIC_INFO],\n      errorMessages: errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages[SETUP_INSTITUTE_BASIC_INFO]\n    }\n  };\n};\n_s4(useEndPointsSetupBasicInfo, \"cgwPj12kO1/yIJY9R0ijcX8Igeo=\", false, function () {\n  return [useNotification, useLoading];\n});\nexport const useEndPointsSetupPayment = () => {\n  _s5();\n  const {\n    showErrorNotification,\n    showSuccessNotification,\n    successMessages,\n    errorMessages\n  } = useNotification();\n  const {\n    isLoading,\n    setLoading\n  } = useLoading();\n  const SETUP_INSTITUTE_PAYMENT = apiConstants.loadingStateKeys.SETUP_PAYMENT;\n\n  /**\n   * Handles the EndPoints payment process with loading states and error handling\n   * @param {Object} payload - The endPoints payment data\n   * @param {Object} queryParams - Additional parameters for the setup request\n   * @param {function} onSuccess - Callback to execute on successful setup\n   * @param {function} onError - Callback to execute on setup failure\n   */\n\n  const setupEndPointsPayment = useCallback(async ({\n    payload,\n    onSuccess,\n    onError,\n    options\n  }, queryParams) => {\n    setLoading(SETUP_INSTITUTE_PAYMENT, true);\n    const controller = new AbortController();\n    try {\n      const data = await endPointsApiService.setupEndPointsPayment(payload, queryParams, controller.signal);\n      showSuccessNotification({\n        key: SETUP_INSTITUTE_PAYMENT,\n        value: data,\n        hideNotification: (options === null || options === void 0 ? void 0 : options.hideNotification) || false\n      });\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();\n      return data;\n    } catch (error) {\n      console.log(error);\n      showErrorNotification({\n        key: SETUP_INSTITUTE_PAYMENT,\n        value: error || \"Failed to complete setup endPoints payment \"\n      });\n      onError === null || onError === void 0 ? void 0 : onError();\n      console.error(\"Setup EndPoints payment error:\", error);\n      throw error;\n    } finally {\n      setLoading(SETUP_INSTITUTE_PAYMENT, false);\n    }\n  }, [SETUP_INSTITUTE_PAYMENT, showErrorNotification, showSuccessNotification, setLoading]);\n  return {\n    endPointsSetupPayment: {\n      execute: setupEndPointsPayment,\n      isLoading: isLoading(SETUP_INSTITUTE_PAYMENT) || false,\n      successMessages: successMessages === null || successMessages === void 0 ? void 0 : successMessages[SETUP_INSTITUTE_PAYMENT],\n      errorMessages: errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages[SETUP_INSTITUTE_PAYMENT]\n    }\n  };\n};\n_s5(useEndPointsSetupPayment, \"WtLqJCcfiMLzkYnZ+x3sgswoN0c=\", false, function () {\n  return [useNotification, useLoading];\n});\nexport const useEndPointsSetupDetails = () => {\n  _s6();\n  const {\n    showErrorNotification,\n    showSuccessNotification,\n    successMessages,\n    errorMessages\n  } = useNotification();\n  const {\n    isLoading,\n    setLoading\n  } = useLoading();\n  const SETUP_INSTITUTE_DETAILS = apiConstants.loadingStateKeys.SETUP_DETAILS;\n\n  /**\n   * Handles the EndPoints Details process with loading states and error handling\n   * @param {Object} payload - The endPoints Details data\n   * @param {Object} queryParams - Additional parameters for the setup request\n   * @param {function} onSuccess - Callback to execute on successful setup\n   * @param {function} onError - Callback to execute on setup failure\n   */\n\n  const setupEndPointsDetails = useCallback(async ({\n    payload,\n    onSuccess,\n    onError,\n    options\n  }, queryParams) => {\n    setLoading(SETUP_INSTITUTE_DETAILS, true);\n    const controller = new AbortController();\n    try {\n      const data = await endPointsApiService.setupEndPointsDetails(payload, queryParams, controller.signal);\n      showSuccessNotification({\n        key: SETUP_INSTITUTE_DETAILS,\n        value: data,\n        hideNotification: (options === null || options === void 0 ? void 0 : options.hideNotification) || false\n      });\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();\n      return data;\n    } catch (error) {\n      console.log(error);\n      showErrorNotification({\n        key: SETUP_INSTITUTE_DETAILS,\n        value: error || \"Failed to complete setup endPoints Details \"\n      });\n      onError === null || onError === void 0 ? void 0 : onError();\n      console.error(\"Setup EndPoints Details error:\", error);\n      throw error;\n    } finally {\n      setLoading(SETUP_INSTITUTE_DETAILS, false);\n    }\n  }, [SETUP_INSTITUTE_DETAILS, showErrorNotification, showSuccessNotification, setLoading]);\n  return {\n    endPointsSetupDetails: {\n      execute: setupEndPointsDetails,\n      isLoading: isLoading(SETUP_INSTITUTE_DETAILS) || false,\n      successMessages: successMessages === null || successMessages === void 0 ? void 0 : successMessages[SETUP_INSTITUTE_DETAILS],\n      errorMessages: errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages[SETUP_INSTITUTE_DETAILS]\n    }\n  };\n};\n_s6(useEndPointsSetupDetails, \"0Wid7OcBfLZ9jqDV+VMqI/17mek=\", false, function () {\n  return [useNotification, useLoading];\n});\nexport const useEndPointsSetupTheme = () => {\n  _s7();\n  const {\n    showErrorNotification,\n    showSuccessNotification,\n    successMessages,\n    errorMessages\n  } = useNotification();\n  const {\n    isLoading,\n    setLoading\n  } = useLoading();\n  const SETUP_TEMPLATE = apiConstants.loadingStateKeys.SETUP_TEMPLATE;\n\n  /**\n   * Handles the EndPoints Theme process with loading states and error handling\n   * @param {Object} payload - The endPoints Theme data\n   * @param {Object} queryParams - Additional parameters for the setup request\n   * @param {function} onSuccess - Callback to execute on successful setup\n   * @param {function} onError - Callback to execute on setup failure\n   */\n\n  const setupEndPointsTheme = useCallback(async ({\n    payload,\n    onSuccess,\n    onError,\n    options\n  }, queryParams) => {\n    setLoading(SETUP_TEMPLATE, true);\n    const controller = new AbortController();\n    try {\n      const data = await endPointsApiService.setupEndPointsTheme(payload, queryParams, controller.signal);\n      showSuccessNotification({\n        key: SETUP_TEMPLATE,\n        value: data,\n        hideNotification: (options === null || options === void 0 ? void 0 : options.hideNotification) || false\n      });\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(data);\n    } catch (error) {\n      console.log(error);\n      showErrorNotification({\n        key: SETUP_TEMPLATE,\n        value: error || \"Failed to complete setup endPoints Theme \"\n      });\n      onError === null || onError === void 0 ? void 0 : onError(error);\n      console.error(\"Setup EndPoints Theme error:\", error);\n      throw error;\n    } finally {\n      setLoading(SETUP_TEMPLATE, false);\n    }\n  }, [SETUP_TEMPLATE, showErrorNotification, showSuccessNotification, setLoading]);\n  return {\n    endPointsSetupTheme: {\n      execute: setupEndPointsTheme,\n      isLoading: isLoading(SETUP_TEMPLATE) || false,\n      successMessages: successMessages === null || successMessages === void 0 ? void 0 : successMessages[SETUP_TEMPLATE],\n      errorMessages: errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages[SETUP_TEMPLATE]\n    }\n  };\n};\n_s7(useEndPointsSetupTheme, \"S028knFr4b+LkVD6wr8CiEOznGM=\", false, function () {\n  return [useNotification, useLoading];\n});\nexport const useEndPointsSetupPassword = () => {\n  _s8();\n  const {\n    showErrorNotification,\n    showSuccessNotification,\n    successMessages,\n    errorMessages\n  } = useNotification();\n  const {\n    isLoading,\n    setLoading\n  } = useLoading();\n  const SETUP_PASSWORD = apiConstants.loadingStateKeys.SETUP_PASSWORD;\n\n  /**\n   * Handles the EndPoints Theme process with loading states and error handling\n   * @param {Object} payload - The endPoints Theme data\n   * @param {Object} queryParams - Additional parameters for the setup request\n   * @param {function} onSuccess - Callback to execute on successful setup\n   * @param {function} onError - Callback to execute on setup failure\n   */\n\n  const setupEndPointsPassword = useCallback(async ({\n    payload,\n    onSuccess,\n    onError,\n    options\n  }, queryParams) => {\n    setLoading(SETUP_PASSWORD, true);\n    const controller = new AbortController();\n    try {\n      const data = await endPointsApiService.setupEndPointsPassword(payload, queryParams, controller.signal);\n      showSuccessNotification({\n        key: SETUP_PASSWORD,\n        value: data,\n        hideNotification: (options === null || options === void 0 ? void 0 : options.hideNotification) || false\n      });\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(data);\n    } catch (error) {\n      console.log(error);\n      showErrorNotification({\n        key: SETUP_PASSWORD,\n        value: error || \"Failed to complete setup endPoints Password \"\n      });\n      onError === null || onError === void 0 ? void 0 : onError(error);\n      console.error(\"Setup EndPoints Password error:\", error);\n      throw error;\n    } finally {\n      setLoading(SETUP_PASSWORD, false);\n    }\n  }, [SETUP_PASSWORD, showErrorNotification, showSuccessNotification, setLoading]);\n  return {\n    endPointsSetupPassword: {\n      execute: setupEndPointsPassword,\n      isLoading: isLoading(SETUP_PASSWORD) || false,\n      successMessages: successMessages === null || successMessages === void 0 ? void 0 : successMessages[SETUP_PASSWORD],\n      errorMessages: errorMessages === null || errorMessages === void 0 ? void 0 : errorMessages[SETUP_PASSWORD]\n    }\n  };\n};\n_s8(useEndPointsSetupPassword, \"843zgjoYwsR43TBLg1nxxC3Vd7Y=\", false, function () {\n  return [useNotification, useLoading];\n});","map":{"version":3,"names":["endPointsApiService","useLoading","useNotification","apiConstants","useCallback","useState","useEndPointsSignup","_s","showErrorNotification","showSuccessNotification","successMessages","errorMessages","isLoading","setLoading","SIGNUP_KEY","loadingStateKeys","SIGN_UP","executeEndPointsSignup","payload","onSuccess","onError","options","params","controller","AbortController","data","createSignup","signal","showNotification","key","value","hideNotification","error","console","endPointsSignup","execute","useEndPointsVerifyEmail","_s2","Verify_Email_KEY","VERIFY_EMAIL","executeEndPointsVerifyEmail","_data$data","verifyEmail","token","localStorage","setItem","endPointsVerifyEmail","useEndPointsOnboardedUser","_s3","user","setUser","LOADING_KEY","CURRENT_ONBOARDED_USER","fetchUser","currentOnboardedUser","onboardedUser","fetch","useEndPointsSetupBasicInfo","_s4","SETUP_INSTITUTE_BASIC_INFO","SETUP_BASE_INFO","setupEndPointsBasicInfo","queryParams","log","errors","success","message","statusCode","joiErrors","path","endPointsSetupBasicInfo","useEndPointsSetupPayment","_s5","SETUP_INSTITUTE_PAYMENT","SETUP_PAYMENT","setupEndPointsPayment","endPointsSetupPayment","useEndPointsSetupDetails","_s6","SETUP_INSTITUTE_DETAILS","SETUP_DETAILS","setupEndPointsDetails","endPointsSetupDetails","useEndPointsSetupTheme","_s7","SETUP_TEMPLATE","setupEndPointsTheme","endPointsSetupTheme","useEndPointsSetupPassword","_s8","SETUP_PASSWORD","setupEndPointsPassword","endPointsSetupPassword"],"sources":["/home/user/Documents/Asset-Management/src/services/hooks/sampleEndPoints/index.js"],"sourcesContent":["import { endPointsApiService } from \"@/services/api/sampleEndPoints\";\nimport { useLoading } from \"@/services/context/loading\";\nimport { useNotification } from \"@/services/context/notification\";\nimport apiConstants from \"@/services/utils/constants\";\nimport { useCallback, useState } from \"react\";\n\n/**\n * Custom hook to handle EndPoints signup functionality with loading and notification states\n * @returns {Object} Object containing EndPoints signup execution function and related states\n */\n\nexport const useEndPointsSignup = () => {\n    const { showErrorNotification, showSuccessNotification, successMessages, errorMessages } = useNotification();\n\n    const { isLoading, setLoading } = useLoading();\n\n    const SIGNUP_KEY = apiConstants.loadingStateKeys.SIGN_UP;\n\n    /**\n     * Handles the EndPoints signup process with loading states and error handling\n     * @param {Object} payload - The signup data\n     * @param {Object} params - Additional parameters for the signup request\n     * @param {function} onSuccess - Callback to execute on successful signup\n     * @param {function} onError - Callback to execute on signup failure\n     */\n\n    const executeEndPointsSignup = useCallback(\n        async ({ payload, onSuccess, onError, options }, params) => {\n            setLoading(SIGNUP_KEY, true);\n            const controller = new AbortController();\n\n            try {\n                const data = await endPointsApiService.createSignup(payload, params, controller.signal);\n\n                if (options?.showNotification) {\n                    showSuccessNotification({\n                        key: SIGNUP_KEY,\n                        value: data,\n                        hideNotification: true,\n                    });\n                }\n\n                onSuccess?.();\n                return data;\n            } catch (error) {\n                showErrorNotification({\n                    key: SIGNUP_KEY,\n                    value: error || \"Failed to complete signup\",\n                });\n\n                onError?.();\n                console.error(\"Signup error:\", error);\n                throw error;\n            } finally {\n                setLoading(SIGNUP_KEY, false);\n            }\n        },\n        [SIGNUP_KEY, showErrorNotification, showSuccessNotification, setLoading]\n    );\n    return {\n        endPointsSignup: {\n            execute: executeEndPointsSignup,\n            isLoading: isLoading(SIGNUP_KEY) || false,\n            successMessages: successMessages?.[SIGNUP_KEY],\n            errorMessages: errorMessages?.[SIGNUP_KEY],\n        },\n    };\n};\n\nexport const useEndPointsVerifyEmail = () => {\n    const { showErrorNotification, showSuccessNotification, successMessages, errorMessages } = useNotification();\n\n    const { isLoading, setLoading } = useLoading();\n\n    const Verify_Email_KEY = apiConstants.loadingStateKeys.VERIFY_EMAIL;\n\n    /**\n     * Handles the EndPoints verify email process with loading states and error handling\n     * @param {Object} payload - The verify email data\n     * @param {Object} params - Additional parameters for the verify email request\n     * @param {function} onSuccess - Callback to execute on successful verify email\n     * @param {function} onError - Callback to execute on verify email failure\n     */\n\n    const executeEndPointsVerifyEmail = useCallback(\n        async ({ payload, onSuccess, onError, options }, params) => {\n            setLoading(Verify_Email_KEY, true);\n            const controller = new AbortController();\n\n            try {\n                const data = await endPointsApiService.verifyEmail(payload, params, controller.signal);\n                if (data?.data?.token) {\n                    localStorage.setItem(\"endPoints_token\", data.data.token);\n                }\n                showSuccessNotification({\n                    key: Verify_Email_KEY,\n                    value: data,\n                    hideNotification: true,\n                });\n                if (onSuccess) onSuccess();\n            } catch (error) {\n                showErrorNotification({\n                    key: Verify_Email_KEY,\n                    value: error || \"Failed to complete verify email\",\n                });\n                if (onError) onError();\n                console.error(\"verify email error:\", error);\n            } finally {\n                setLoading(Verify_Email_KEY, false);\n            }\n        },\n        [Verify_Email_KEY, showErrorNotification, showSuccessNotification, setLoading]\n    );\n\n    return {\n        endPointsVerifyEmail: {\n            execute: executeEndPointsVerifyEmail,\n            isLoading: isLoading(Verify_Email_KEY) || false,\n            successMessages: successMessages?.[Verify_Email_KEY],\n            errorMessages: errorMessages?.[Verify_Email_KEY],\n        },\n    };\n};\n\nexport const useEndPointsOnboardedUser = () => {\n    const [user, setUser] = useState({});\n    const { showErrorNotification, successMessages, errorMessages } = useNotification();\n    const { isLoading, setLoading } = useLoading();\n    const LOADING_KEY = apiConstants.loadingStateKeys.CURRENT_ONBOARDED_USER;\n\n    const fetchUser = useCallback(\n        async ({ onSuccess, onError, options }, params) => {\n            setLoading(LOADING_KEY, true);\n            const controller = new AbortController();\n\n            try {\n                const { data } = await endPointsApiService.currentOnboardedUser(params, controller.signal);\n                setUser(data);\n                onSuccess?.(data);\n            } catch (error) {\n                showErrorNotification({\n                    key: LOADING_KEY,\n                    value: error || \"Failed to fetch onboarded user\",\n                    hideNotification: true,\n                });\n                onError?.(error);\n                console.error(\"Failed to fetch onboarded user:\", error);\n            } finally {\n                setLoading(LOADING_KEY, false);\n            }\n        },\n        [LOADING_KEY, showErrorNotification, setLoading]\n    );\n\n    return {\n        onboardedUser: {\n            data: user,\n            fetch: fetchUser,\n            isLoading: isLoading(LOADING_KEY) || false,\n            successMessages: successMessages?.[LOADING_KEY],\n            errorMessages: errorMessages?.[LOADING_KEY],\n        },\n    };\n};\n\nexport const useEndPointsSetupBasicInfo = () => {\n    const { showErrorNotification, showSuccessNotification, successMessages, errorMessages } = useNotification();\n    const { isLoading, setLoading } = useLoading();\n\n    const SETUP_INSTITUTE_BASIC_INFO = apiConstants.loadingStateKeys.SETUP_BASE_INFO;\n\n    /**\n     * Handles the EndPoints basic details process with loading states and error handling\n     * @param {Object} payload - The endPoints basic info data\n     * @param {Object} queryParams - Additional parameters for the setup request\n     * @param {function} onSuccess - Callback to execute on successful setup\n     * @param {function} onError - Callback to execute on setup failure\n     */\n\n    const setupEndPointsBasicInfo = useCallback(\n        async ({ payload, onSuccess, onError, options }, queryParams) => {\n            setLoading(SETUP_INSTITUTE_BASIC_INFO, true);\n            const controller = new AbortController();\n\n            try {\n                const data = await endPointsApiService.setupEndPointsBasicInfo(payload, queryParams, controller.signal);\n                showSuccessNotification({\n                    key: SETUP_INSTITUTE_BASIC_INFO,\n                    value: data,\n                    hideNotification: options?.hideNotification || false,\n                });\n                onSuccess?.();\n                return data;\n            } catch (error) {\n                console.log(error);\n\n                const errors = {\n                    success: false,\n                    message: \"An endPoints with the name 'kareem duke test.....' already exists. Please choose a different name.\",\n                    statusCode: 409,\n                };\n\n                const joiErrors = {\n                    success: false,\n                    message: \"Validation Failed\",\n                    statusCode: 400,\n                    errors: [\n                        {\n                            message: \"Owner name must be at least 2 characters long.\",\n                            path: [\"ownerName\"],\n                        },\n                        {\n                            message: \"Owner phone number must be exactly 10 digits.\",\n                            path: [\"ownerPhone\"],\n                        },\n                    ],\n                };\n\n                showErrorNotification({\n                    key: SETUP_INSTITUTE_BASIC_INFO,\n                    value: error || \"Failed to complete setup endPoints Basic Info \",\n                });\n                onError?.();\n                console.error(\"Setup EndPoints Basic Info error:\", error);\n                throw error;\n            } finally {\n                setLoading(SETUP_INSTITUTE_BASIC_INFO, false);\n            }\n        },\n        [SETUP_INSTITUTE_BASIC_INFO, showErrorNotification, showSuccessNotification, setLoading]\n    );\n\n    return {\n        endPointsSetupBasicInfo: {\n            execute: setupEndPointsBasicInfo,\n            isLoading: isLoading(SETUP_INSTITUTE_BASIC_INFO) || false,\n            successMessages: successMessages?.[SETUP_INSTITUTE_BASIC_INFO],\n            errorMessages: errorMessages?.[SETUP_INSTITUTE_BASIC_INFO],\n        },\n    };\n};\n\nexport const useEndPointsSetupPayment = () => {\n    const { showErrorNotification, showSuccessNotification, successMessages, errorMessages } = useNotification();\n    const { isLoading, setLoading } = useLoading();\n\n    const SETUP_INSTITUTE_PAYMENT = apiConstants.loadingStateKeys.SETUP_PAYMENT;\n\n    /**\n     * Handles the EndPoints payment process with loading states and error handling\n     * @param {Object} payload - The endPoints payment data\n     * @param {Object} queryParams - Additional parameters for the setup request\n     * @param {function} onSuccess - Callback to execute on successful setup\n     * @param {function} onError - Callback to execute on setup failure\n     */\n\n    const setupEndPointsPayment = useCallback(\n        async ({ payload, onSuccess, onError, options }, queryParams) => {\n            setLoading(SETUP_INSTITUTE_PAYMENT, true);\n            const controller = new AbortController();\n\n            try {\n                const data = await endPointsApiService.setupEndPointsPayment(payload, queryParams, controller.signal);\n                showSuccessNotification({\n                    key: SETUP_INSTITUTE_PAYMENT,\n                    value: data,\n                    hideNotification: options?.hideNotification || false,\n                });\n                onSuccess?.();\n                return data;\n            } catch (error) {\n                console.log(error);\n                showErrorNotification({\n                    key: SETUP_INSTITUTE_PAYMENT,\n                    value: error || \"Failed to complete setup endPoints payment \",\n                });\n                onError?.();\n                console.error(\"Setup EndPoints payment error:\", error);\n                throw error;\n            } finally {\n                setLoading(SETUP_INSTITUTE_PAYMENT, false);\n            }\n        },\n        [SETUP_INSTITUTE_PAYMENT, showErrorNotification, showSuccessNotification, setLoading]\n    );\n\n    return {\n        endPointsSetupPayment: {\n            execute: setupEndPointsPayment,\n            isLoading: isLoading(SETUP_INSTITUTE_PAYMENT) || false,\n            successMessages: successMessages?.[SETUP_INSTITUTE_PAYMENT],\n            errorMessages: errorMessages?.[SETUP_INSTITUTE_PAYMENT],\n        },\n    };\n};\n\nexport const useEndPointsSetupDetails = () => {\n    const { showErrorNotification, showSuccessNotification, successMessages, errorMessages } = useNotification();\n    const { isLoading, setLoading } = useLoading();\n\n    const SETUP_INSTITUTE_DETAILS = apiConstants.loadingStateKeys.SETUP_DETAILS;\n\n    /**\n     * Handles the EndPoints Details process with loading states and error handling\n     * @param {Object} payload - The endPoints Details data\n     * @param {Object} queryParams - Additional parameters for the setup request\n     * @param {function} onSuccess - Callback to execute on successful setup\n     * @param {function} onError - Callback to execute on setup failure\n     */\n\n    const setupEndPointsDetails = useCallback(\n        async ({ payload, onSuccess, onError, options }, queryParams) => {\n            setLoading(SETUP_INSTITUTE_DETAILS, true);\n            const controller = new AbortController();\n\n            try {\n                const data = await endPointsApiService.setupEndPointsDetails(payload, queryParams, controller.signal);\n                showSuccessNotification({\n                    key: SETUP_INSTITUTE_DETAILS,\n                    value: data,\n                    hideNotification: options?.hideNotification || false,\n                });\n                onSuccess?.();\n                return data;\n            } catch (error) {\n                console.log(error);\n                showErrorNotification({\n                    key: SETUP_INSTITUTE_DETAILS,\n                    value: error || \"Failed to complete setup endPoints Details \",\n                });\n                onError?.();\n                console.error(\"Setup EndPoints Details error:\", error);\n                throw error;\n            } finally {\n                setLoading(SETUP_INSTITUTE_DETAILS, false);\n            }\n        },\n        [SETUP_INSTITUTE_DETAILS, showErrorNotification, showSuccessNotification, setLoading]\n    );\n\n    return {\n        endPointsSetupDetails: {\n            execute: setupEndPointsDetails,\n            isLoading: isLoading(SETUP_INSTITUTE_DETAILS) || false,\n            successMessages: successMessages?.[SETUP_INSTITUTE_DETAILS],\n            errorMessages: errorMessages?.[SETUP_INSTITUTE_DETAILS],\n        },\n    };\n};\n\nexport const useEndPointsSetupTheme = () => {\n    const { showErrorNotification, showSuccessNotification, successMessages, errorMessages } = useNotification();\n    const { isLoading, setLoading } = useLoading();\n\n    const SETUP_TEMPLATE = apiConstants.loadingStateKeys.SETUP_TEMPLATE;\n\n    /**\n     * Handles the EndPoints Theme process with loading states and error handling\n     * @param {Object} payload - The endPoints Theme data\n     * @param {Object} queryParams - Additional parameters for the setup request\n     * @param {function} onSuccess - Callback to execute on successful setup\n     * @param {function} onError - Callback to execute on setup failure\n     */\n\n    const setupEndPointsTheme = useCallback(\n        async ({ payload, onSuccess, onError, options }, queryParams) => {\n            setLoading(SETUP_TEMPLATE, true);\n            const controller = new AbortController();\n\n            try {\n                const data = await endPointsApiService.setupEndPointsTheme(payload, queryParams, controller.signal);\n                showSuccessNotification({\n                    key: SETUP_TEMPLATE,\n                    value: data,\n                    hideNotification: options?.hideNotification || false,\n                });\n                onSuccess?.(data);\n            } catch (error) {\n                console.log(error);\n                showErrorNotification({\n                    key: SETUP_TEMPLATE,\n                    value: error || \"Failed to complete setup endPoints Theme \",\n                });\n                onError?.(error);\n                console.error(\"Setup EndPoints Theme error:\", error);\n                throw error;\n            } finally {\n                setLoading(SETUP_TEMPLATE, false);\n            }\n        },\n        [SETUP_TEMPLATE, showErrorNotification, showSuccessNotification, setLoading]\n    );\n\n    return {\n        endPointsSetupTheme: {\n            execute: setupEndPointsTheme,\n            isLoading: isLoading(SETUP_TEMPLATE) || false,\n            successMessages: successMessages?.[SETUP_TEMPLATE],\n            errorMessages: errorMessages?.[SETUP_TEMPLATE],\n        },\n    };\n};\n\nexport const useEndPointsSetupPassword = () => {\n    const { showErrorNotification, showSuccessNotification, successMessages, errorMessages } = useNotification();\n    const { isLoading, setLoading } = useLoading();\n\n    const SETUP_PASSWORD = apiConstants.loadingStateKeys.SETUP_PASSWORD;\n\n    /**\n     * Handles the EndPoints Theme process with loading states and error handling\n     * @param {Object} payload - The endPoints Theme data\n     * @param {Object} queryParams - Additional parameters for the setup request\n     * @param {function} onSuccess - Callback to execute on successful setup\n     * @param {function} onError - Callback to execute on setup failure\n     */\n\n    const setupEndPointsPassword = useCallback(\n        async ({ payload, onSuccess, onError, options }, queryParams) => {\n            setLoading(SETUP_PASSWORD, true);\n            const controller = new AbortController();\n\n            try {\n                const data = await endPointsApiService.setupEndPointsPassword(payload, queryParams, controller.signal);\n                showSuccessNotification({\n                    key: SETUP_PASSWORD,\n                    value: data,\n                    hideNotification: options?.hideNotification || false,\n                });\n                onSuccess?.(data);\n            } catch (error) {\n                console.log(error);\n                showErrorNotification({\n                    key: SETUP_PASSWORD,\n                    value: error || \"Failed to complete setup endPoints Password \",\n                });\n                onError?.(error);\n                console.error(\"Setup EndPoints Password error:\", error);\n                throw error;\n            } finally {\n                setLoading(SETUP_PASSWORD, false);\n            }\n        },\n        [SETUP_PASSWORD, showErrorNotification, showSuccessNotification, setLoading]\n    );\n\n    return {\n        endPointsSetupPassword: {\n            execute: setupEndPointsPassword,\n            isLoading: isLoading(SETUP_PASSWORD) || false,\n            successMessages: successMessages?.[SETUP_PASSWORD],\n            errorMessages: errorMessages?.[SETUP_PASSWORD],\n        },\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}